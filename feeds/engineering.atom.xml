<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>marcel.is</title><link href="http://marcel.is/" rel="alternate"></link><link href="http://marcel.is/feeds/engineering.atom.xml" rel="self"></link><id>http://marcel.is/</id><updated>2000-01-03T00:00:00+01:00</updated><entry><title>Stop coding, ignore that quench.</title><link href="http://marcel.is/quench.html" rel="alternate"></link><published>2000-01-03T00:00:00+01:00</published><author><name>Marcel Krcah</name></author><id>tag:marcel.is,2000-01-03:quench.html</id><summary type="html">&lt;p&gt;We, software engineers, love to build.&lt;/p&gt;
&lt;p&gt;The thrilling sensation of adding a feature or creating something new from scratch. The excitement of using the latest technology that we've been reading about on Hacker News for so long.&lt;/p&gt;
&lt;p&gt;And thus, we build.&lt;/p&gt;
&lt;p&gt;We dive into coding, into architecture, into design. Quenching another dose of the thrill.&lt;/p&gt;
&lt;p&gt;I am guilty of this.&lt;/p&gt;
&lt;p&gt;Yet, I came to believe that blindly following the quench is by far the largest productivity killer. I believe that coding should be considered the very last resort, used only when all other options are exhausted.&lt;/p&gt;
&lt;p&gt;Let me explain.&lt;/p&gt;
&lt;p&gt;Development is very expensive. It takes long to finish. It requires future time investment. It requires maintenance and bug fixes. There is opportunity cost. And there is a possibility that our work won't be used in production, because the priorities have shifted.&lt;/p&gt;
&lt;p&gt;No matter the team, the agile process or the technology stack, the development will always be this way - resource intensive. Coding slows down the company, drains the IT budget and creates technical debt for future.&lt;/p&gt;
&lt;p&gt;So before blindly jumping into coding, take a step back. Understand arguments why the problem or the feature at hand needs to be build in the first place. Find if there is way to simplify the problem. Find if there is an existing solution in-house or off-the-shelf that can be reused to solve it.&lt;/p&gt;
&lt;p&gt;Fight that internal quench as much as possible.&lt;/p&gt;
&lt;p&gt;Only as the very last resort, only when all other options fail, start thinking about the very minimal coding solution to the problem you have.&lt;/p&gt;
&lt;p&gt;And, very cautiously, take that first sip.&lt;/p&gt;</summary></entry><entry><title>Strive for focus, strive for simplicity</title><link href="http://marcel.is/focus.html" rel="alternate"></link><published>2000-01-02T00:00:00+01:00</published><author><name>Marcel Krcah</name></author><id>tag:marcel.is,2000-01-02:focus.html</id><summary type="html">&lt;p&gt;I believe that one of the reasons why companies fail is a lack of focus and fear of simplicity. They focus on too many things at once. Have too many legacy customers. Want to squeeze dollars from &lt;em&gt;every&lt;/em&gt; opportunity possible.&lt;/p&gt;
&lt;p&gt;Doing everything yet doing nothing properly.&lt;/p&gt;
&lt;p&gt;I believe this is a road to disaster.&lt;/p&gt;
&lt;p&gt;I have seen this multiple times.&lt;/p&gt;
&lt;p&gt;Processes get complicated. IT development slows down. Products get harder to understand. More people are needed to handle the newly created complexity.&lt;/p&gt;
&lt;h2&gt;Example 1: Building a generic solution instead of pushing for simplicity&lt;/h2&gt;
&lt;p&gt;Once, my team was given a task to build a generic pricing rule engine. The engine was supposed to support all the current and legacy business deals. Since the company had been lacking focus, the pricing had gotten out of hand. It got so complex that there was only one person in the whole company who understood the pricing intricacies completely. He tried to explain it to us many times, but the complexity was overwhelming. There were exceptions everywhere.&lt;/p&gt;
&lt;p&gt;We should have paused and &lt;a href="/quench"&gt;not follow the quench&lt;/a&gt;. We should have pushed back to remove as much exceptions as possible. To simplify our pricing model.&lt;/p&gt;
&lt;p&gt;This way, all parties would win:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pricing would be easy to explain and simple to understand.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Bus_factor"&gt;Bus-factor&lt;/a&gt; would increase.&lt;/li&gt;
&lt;li&gt;Development would be quicker.&lt;/li&gt;
&lt;li&gt;Processes would streamline.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead, we have built the engine. It sure brought advantages. However, I believe that removing the root cause would bring benefits of another level.&lt;/p&gt;
&lt;h2&gt;Example 2: Expanding B2B product with B2C capabilities&lt;/h2&gt;
&lt;p&gt;Another time, another team. We were given a task to expand our B2B platform with B2C capabilities. The overlap between B2B and B2C features were minimal.  The B2B platform was hardly stable.&lt;/p&gt;
&lt;p&gt;We &lt;a href="/quench"&gt;followed the quench&lt;/a&gt;. Again. And things got very complex very quickly.&lt;/p&gt;
&lt;p&gt;We were very slow. Discussions. Hacks.&lt;/p&gt;
&lt;p&gt;It felt like fitting a circle in a square.&lt;/p&gt;
&lt;p&gt;Instead, we should have focused on two things: polishing the B2B platform and start a green-field B2C product.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The development would be faster&lt;/li&gt;
&lt;li&gt;Our end-users would understand the products easier.&lt;/li&gt;
&lt;li&gt;We would end up in two &lt;a href="http://stackoverflow.com/questions/3085285/cohesion-coupling"&gt;loosely-coupled yet highly-cohesive&lt;/a&gt; products.&lt;/li&gt;
&lt;li&gt;Oh, and we would enjoy the hell out of it!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Strive for focus and simplicity&lt;/h2&gt;
&lt;p&gt;Choose one thing and be the best at it. Stop marginal legacy business lines. Refuse niche requests from small customers. Simplify as much as possible.&lt;/p&gt;
&lt;p&gt;Only when the product is saturated, expand. Do it with sharp focus. Create another product which will be the best at what it offers.&lt;/p&gt;
&lt;p&gt;Simplify and keep focused!&lt;/p&gt;</summary></entry><entry><title>How not to do big-data</title><link href="http://marcel.is/big-data-lessons.html" rel="alternate"></link><published>2000-01-01T00:00:00+01:00</published><author><name>Marcel Krcah</name></author><id>tag:marcel.is,2000-01-01:big-data-lessons.html</id><summary type="html">&lt;p&gt;I was very excited when I joined a colleague on a project to build The Big Data Platform. Finally, I could play with all the cool technologies that everybody was talking about. No more tiresome evening hours. This time a full-time throttle.&lt;/p&gt;
&lt;h2&gt;Journey begins&lt;/h2&gt;
&lt;p&gt;We did everything according to the book.&lt;/p&gt;
&lt;p&gt;We built a powerful and fast data warehouse. It unified all our databases in one place with an exploratory user interface on top. We delivered an ETL pipeline which cleaned the source data and combined them in a novel way. We were on the bleeding-edge: multi-node Hadoop cluster, Impala, Spark, Sqoop, Hue. Along the way, we created &lt;a href="https://github.com/datadudes"&gt;open-source tooling&lt;/a&gt; that we lacked in the standard stack.&lt;/p&gt;
&lt;p&gt;It was amazing!&lt;/p&gt;
&lt;p&gt;It was several months until we finished the technical part.&lt;/p&gt;
&lt;p&gt;I was happy with our deliverable. The management was also satisfied: we were &lt;em&gt;"finally doing the big-data"&lt;/em&gt;. Colleagues were happy - we taught them SQL and gave them a tool to explore data on their own. We had several insightful reports in place and a few interesting ideas on our own on how to continue.&lt;/p&gt;
&lt;h2&gt;And then it hit us.&lt;/h2&gt;
&lt;p&gt;The emptiness.&lt;/p&gt;
&lt;p&gt;The "Now what?" question.&lt;/p&gt;
&lt;p&gt;The limbo of how to use our new baby for the business purposes.&lt;/p&gt;
&lt;p&gt;Our own ideas about how to continue didn't feel quite right. The team had much more pressing projects in the pipeline. Pursuit of our ideas felt like a luxury.&lt;/p&gt;
&lt;p&gt;I realized that we have ended up with a very expensive high-maintenance and complex toy that didn't justify its existence.&lt;/p&gt;
&lt;p&gt;For large part, we chased technology instead of solving a problem as quickly and efficiently as possible.&lt;/p&gt;
&lt;h2&gt;Lesson learned&lt;/h2&gt;
&lt;p&gt;This is what we should have done:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;First, &lt;a href="/quench"&gt;ignore the quench&lt;/a&gt;&lt;/strong&gt;. Clear the mind from any technology-related thrills.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Find a problem, before jumping into solution.&lt;/strong&gt; Talk in person to every stakeholder who might benefit from data-related answers. Deeply understand these opportunities and formulate them as explicitly as possible. Compose a prioritized list of data questions that the company strives for.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Build a very minimal solution&lt;/strong&gt; which would answer the highest priority question. It might be as simple as a SQL query over existing database. Or an &lt;a href="https://ipython.org/"&gt;IPython&lt;/a&gt; notebook with a machine-learning protype. Or just a simple Google Spreasheet. Don't underestimate the power of simple tools. Resist code development as much as possible. Don't automate. Focus on validation.&lt;/li&gt;
&lt;li&gt;Only if the solution is validated and these "boring" technologies do not suffice anymore, start carefully considering a beast like Hadoop and Spark.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This way, you won't hit a roadblock like we did.&lt;/p&gt;
&lt;p&gt;Instead, you will deliver a high-quality and spot-on solution. And the thrill from business impact would be much better that the thrill from the technology.&lt;/p&gt;</summary></entry></feed>